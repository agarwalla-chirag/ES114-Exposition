[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Quarto Blog",
    "section": "",
    "text": "ðŸŒ™\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nElec Assignment\n\n\n\n\n\n\nEE\n\n\n\n\n\n\n\n\n\nFeb 20, 2025\n\n\nChirag Agarwalla\n\n\n\n\n\n\n\n\n\n\n\n\nSimple Visualisation\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "ðŸŒ™\n\n\n\n\n\nWelcome\nHello world, this is my first blog post.\nI can write in markdown\nprint(\"Hello World\")\nI can also write math equations:\n\\[\ny = x^2\n\\]\nI can create lists easily:\n\nOne\nTwo\n\nI can also create numbered lists:\n\nOne\nTwo\n\nOr, create a table:\n\n\n\nName\nAge\n\n\n\n\nAlice\n20\n\n\nBob\n21"
  },
  {
    "objectID": "posts/graph.html",
    "href": "posts/graph.html",
    "title": "Elec Assignment",
    "section": "",
    "text": "ðŸŒ™\n\n\n\n\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom scipy.signal import find_peaks\nfrom scipy.interpolate import interp1d\nfrom scipy.fftpack import fft\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nfrom scipy.signal import find_peaks\nfrom scipy.fftpack import fft\nfrom scipy.interpolate import interp1d\n\nbase_dir = \"./task1\" \ngain_data = []\nphase_data = []\ntime_data_ch1 = None\ntime_data_ch2 = None\nselected_resonance = None\n\nfor folder in os.listdir(base_dir):\n    folder_path = os.path.join(base_dir, folder)\n    if os.path.isdir(folder_path):\n        try:\n            freq = int(folder.split('-')[-1][:-2])  \n        except ValueError:\n            continue  \n        ch1_file = None\n        ch2_file = None\n        for file in os.listdir(folder_path):\n            if \"CH1\" in file:\n                ch1_file = os.path.join(folder_path, file)\n            elif \"CH2\" in file:\n                ch2_file = os.path.join(folder_path, file)\n        \n        if ch1_file and ch2_file:\n            df_ch1 = pd.read_csv(ch1_file, skiprows=2, header=None)\n            df_ch2 = pd.read_csv(ch2_file, skiprows=2, header=None)\n            ch1_voltage = df_ch1.iloc[:, -2].dropna().astype(float).to_numpy()\n            ch2_voltage = df_ch2.iloc[:, -2].dropna().astype(float).to_numpy()\n            v_rms_ch1 = np.sqrt(np.mean(ch1_voltage ** 2))\n            v_rms_ch2 = np.sqrt(np.mean(ch2_voltage ** 2))\n            gain = v_rms_ch2 / v_rms_ch1 if v_rms_ch1 != 0 else np.nan\n            gain_db = 20 * np.log10(gain) if gain &gt; 0 else np.nan\n            gain_data.append((freq, gain_db))\n            phase_diff = np.angle(np.fft.fft(ch2_voltage)[0]) - np.angle(np.fft.fft(ch1_voltage)[0])\n            phase_data.append((freq, phase_diff))\n            \n            if selected_resonance is None or gain_db &gt; max([g[1] for g in gain_data]):\n                selected_resonance = freq\n                time_data_ch1 = ch1_voltage\n                time_data_ch2 = ch2_voltage\n\ngain_data.sort()\nphase_data.sort()\nupdatedPhase = []\nfrequencies, gains_db = zip(*gain_data)\n_, phases = zip(*phase_data)\nupdatedPhase = [(i - 2*np.pi) if i &gt; np.pi else (i + 2*np.pi) if i &lt; -np.pi else i for i in phases]\nunwrapped_phase = np.unwrap(updatedPhase)\npeaks, _ = find_peaks(gains_db, height=np.mean(gains_db))\nresonant_freqs = [frequencies[i] for i in peaks]\ninterp_func = interp1d(frequencies, gains_db, kind='cubic', fill_value=\"extrapolate\")\ninterp_frequencies = np.linspace(min(frequencies), max(frequencies), 5000)  # Increase density\ninterp_gains = interp_func(interp_frequencies)\nq_factors = []\nfor peak in peaks:\n    f_r = frequencies[peak]\n    peak_mag = gains_db[peak]\n    half_power = peak_mag - 3 \n    left_candidates = [f for f in interp_frequencies if f &lt; f_r and interp_func(f) &lt;= half_power]\n    right_candidates = [f for f in interp_frequencies if f &gt; f_r and interp_func(f) &lt;= half_power]\n    \n    if left_candidates and right_candidates:\n        left_f = max(left_candidates)\n        right_f = min(right_candidates)\n        delta_f = right_f - left_f\n        q_factor = f_r / delta_f\n        q_factors.append((f_r, q_factor))\n    else:\n        q_factors.append((f_r, np.nan))\n        print(f\"Warning: Unable to calculate Q-factor for {f_r} Hz. Bandwidth estimation failed.\")\n\nplt.figure(figsize=(18, 10))\nplt.plot(frequencies, gains_db, marker='o', linestyle='-', label='Magnitude Response')\nplt.scatter(resonant_freqs, [gains_db[i] for i in peaks], color='red', label='Resonances', zorder=3) \nplt.xlabel(\"Frequency (Hz)\")\nplt.ylabel(\"Gain (dB)\")\nplt.title(\"Magnitude Response\")\nplt.legend()\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(18, 10))\nplt.plot(frequencies, (-1)*unwrapped_phase, marker='o', linestyle='-', label='Phase Response')\nplt.xlabel(\"Frequency (Hz)\")\nplt.ylabel(\"Phase (radians)\")\nplt.title(\"Phase Response\")\nplt.legend()\nplt.grid()\nplt.show()\n\nprint(\"Resonant Frequencies and Quality Factors:\")\nfor f_r, q in q_factors:\n    print(f\"Resonant Frequency: {f_r} Hz, Q-Factor: {q if not np.isnan(q) else 'Calculation Failed'}\")\n\nif time_data_ch1 is not None and time_data_ch2 is not None:\n    plt.figure(figsize=(12, 6))\n    plt.plot(time_data_ch1, label='CH1 (Input)')\n    plt.plot(time_data_ch2, label='CH2 (Output)')\n    plt.xlabel(\"Time (samples)\")\n    plt.ylabel(\"Voltage (V)\")\n    plt.title(f\"Time Domain Signal at Frequency: {selected_resonance} Hz\")\n    plt.legend()\n    plt.grid()\n    plt.show()\n    \n    N = len(time_data_ch1)\n    fft_ch1 = np.abs(fft(time_data_ch1))[:N // 2]\n    fft_ch2 = np.abs(fft(time_data_ch2))[:N // 2]\n    freqs = np.fft.fftfreq(N, d=1)[:N // 2]\n    \n    plt.figure(figsize=(12, 6))\n    plt.semilogy(freqs, fft_ch1, label='FFT CH1 (Input)')\n    plt.semilogy(freqs, fft_ch2, label='FFT CH2 (Output)')\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.ylabel(\"Magnitude (log scale)\")\n    plt.title(\"FFT of Input and Output Signals\")\n    plt.legend()\n    plt.grid()\n    plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResonant Frequencies and Quality Factors:\nResonant Frequency: 300 Hz, Q-Factor: 2.5986830705250394\nResonant Frequency: 500 Hz, Q-Factor: 0.34411784952158053\nResonant Frequency: 1000 Hz, Q-Factor: 0.7136534947464597\nResonant Frequency: 1500 Hz, Q-Factor: 4.651963521310255\nResonant Frequency: 2600 Hz, Q-Factor: 1.2781520125087278\nResonant Frequency: 3000 Hz, Q-Factor: 1.0309413002082919\nResonant Frequency: 3400 Hz, Q-Factor: 1.1895550174269678\nResonant Frequency: 4200 Hz, Q-Factor: 1.4433178202916088\nResonant Frequency: 4800 Hz, Q-Factor: 0.9296753621616176\nResonant Frequency: 6500 Hz, Q-Factor: 0.9543186417182347\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask 2\n\ndata_dir = \"./task2\" \nfrequencies = []\ngains_db = []\nphases = []\ntime_data_ch1 = None\ntime_data_ch2 = None\nselected_frequency = None\nfor folder in sorted(os.listdir(data_dir)):\n    folder_path = os.path.join(data_dir, folder)\n    if os.path.isdir(folder_path):\n        try:\n            freq = float(''.join(filter(str.isdigit, folder.split('-')[-1])))  \n        except ValueError:\n            continue \n        ch1_file, ch2_file = None, None\n        for file in os.listdir(folder_path):\n            if \"CH1\" in file:\n                ch1_file = os.path.join(folder_path, file)\n            elif \"CH2\" in file:\n                ch2_file = os.path.join(folder_path, file)\n\n        if ch1_file and ch2_file:\n            ch1_data = pd.read_csv(ch1_file)\n            ch2_data = pd.read_csv(ch2_file)\n            ch1_voltage = ch1_data.iloc[:, -2].dropna().astype(float).to_numpy()\n            ch2_voltage = ch2_data.iloc[:, -2].dropna().astype(float).to_numpy()\n            v_in = ch1_voltage.mean()\n            v_out = ch2_voltage.mean()\n            phase = ch2_voltage.mean()  \n            if v_in &gt; 0:\n                gain_db = 20 * np.log10(np.abs(v_out / v_in))\n                gains_db.append(gain_db)\n                frequencies.append(freq)\n                phases.append(phase)\n\n                if selected_frequency is None or gain_db &gt; max(gains_db):\n                    selected_frequency = freq\n                    time_data_ch1 = ch1_voltage\n                    time_data_ch2 = ch2_voltage\n\nnum_points = int(0.8 * len(frequencies))  \nindices = np.linspace(0, len(frequencies) - 1, num_points, dtype=int)\n\nfrequencies = np.array(frequencies)\ngains_db = np.array(gains_db)\nphases = np.array(phases)\nfrequencies = frequencies[indices]\ngains_db = gains_db[indices]\nphases = phases[indices]\n\nsorted_indices = np.argsort(frequencies)\nfrequencies = frequencies[sorted_indices]\ngains_db = gains_db[sorted_indices]\nphases = phases[sorted_indices]\nphases = np.unwrap(phases)\n\nmax_gain = np.max(gains_db)\ncutoff_level = max_gain - 3\n\n\ncutoff_idx = np.where(gains_db &lt;= cutoff_level)[0]\ncutoff_freq = frequencies[cutoff_idx[0]] if len(cutoff_idx) &gt; 0 else None\n\n\nplt.figure(figsize=(12, 6))\nplt.plot(frequencies, gains_db, 'o-', label='Measured Data')\nplt.axhline(y=cutoff_level, color='r', linestyle='--', label='-3dB Cutoff')\nif cutoff_freq:\n    plt.axvline(x=cutoff_freq, color='g', linestyle='--', label=f'Cutoff: {cutoff_freq:.2f} Hz')\nplt.xlabel(\"Frequency (Hz)\")\nplt.ylabel(\"Gain (dB) \")\nplt.title(\"Photodiode Magnitude Response\")\nplt.xscale(\"log\")\nplt.legend()\nplt.grid()\nplt.show()\n\n\nplt.figure(figsize=(12, 6))\nplt.plot(frequencies, phases, 'o-', label='Phase Response')\nplt.xlabel(\"Frequency (Hz) [Logarithmic]\")\nplt.ylabel(\"Phase (radians)\")\nplt.title(\"Photodiode Phase Response [Logarithmic]\")\nplt.xscale(\"log\")\nplt.legend()\nplt.grid()\nplt.show()\n\nif cutoff_freq:\n    print(f\"3dB Cut-off Frequency: {cutoff_freq:.2f} Hz\")\n\n\nif time_data_ch1 is not None and time_data_ch2 is not None:\n    plt.figure(figsize=(12, 6))\n    plt.plot(time_data_ch1, label='CH1 (Input)')\n    plt.plot(time_data_ch2, label='CH2 (Output)')\n    plt.xlabel(\"Time (samples)\")\n    plt.ylabel(\"Voltage (V)\")\n    plt.title(f\"Time Domain Signal at {selected_frequency} Hz\")\n    plt.legend()\n    plt.grid()\n    plt.show()\n\n\n    N = len(time_data_ch1)\n    fft_ch1 = np.abs(fft(time_data_ch1))[:N // 2]\n    fft_ch2 = np.abs(fft(time_data_ch2))[:N // 2]\n    freqs = np.fft.fftfreq(N, d=1)[:N // 2]\n    \n    \n    plt.figure(figsize=(12, 6))\n    plt.semilogy(freqs, fft_ch1, label='FFT CH1 (Input)')\n    plt.semilogy(freqs, fft_ch2, label='FFT CH2 (Output)')\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.ylabel(\"Magnitude (log scale)\")\n    plt.title(\"FFT of Input and Output Signals\")\n    plt.legend()\n    plt.grid()\n    plt.show()"
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisation",
    "section": "",
    "text": "ðŸŒ™\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Template",
    "section": "",
    "text": "ðŸŒ™\n\n\n\n\nQuarto template Text!"
  }
]